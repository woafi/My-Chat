// Store user socket mappings
const userSockets = new Map();

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Handle user joining their personal room
  socket.on('join_user', (userId) => {
    // Store the socket for this user
    userSockets.set(userId, socket.id);
    
    // Join personal room
    socket.join(`user_${userId}`);
    socket.userId = userId; // Store userId on socket for reference
    
    console.log(`User ${userId} joined room user_${userId}, socket: ${socket.id}`);
    
    // Emit confirmation back to user
    socket.emit('joined_user_room', { userId, socketId: socket.id });
  });

  // Handle joining conversation rooms
  socket.on('join_conversation', (data) => {
    const { conversationId, userId } = data;
    socket.join(`conversation_${conversationId}`);
    console.log(`User ${userId} joined conversation ${conversationId}`);
    
    // Emit confirmation
    socket.emit('joined_conversation', { conversationId });
  });

  // Handle leaving conversation rooms
  socket.on('leave_conversation', (data) => {
    const { conversationId, userId } = data;
    socket.leave(`conversation_${conversationId}`);
    console.log(`User ${userId} left conversation ${conversationId}`);
  });

  // Handle typing indicators
  socket.on('typing', (data) => {
    // Broadcast to conversation room AND both user rooms
    socket.to(`conversation_${data.conversationId}`).emit('user_typing', {
      userId: data.userId,
      userName: data.userName,
      isTyping: data.isTyping,
      conversationId: data.conversationId
    });
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
    // Remove from user socket mapping
    if (socket.userId) {
      userSockets.delete(socket.userId);
    }
  });
});





import React, { createContext, useContext, useEffect, useState } from 'react';
import io from 'socket.io-client';
import { useAuth } from './AuthContext';

const SocketContext = createContext();

export const useSocket = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};

export const SocketProvider = ({ children }) => {
  const [socket, setSocket] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);
  const { currentUser } = useAuth();

  useEffect(() => {
    if (currentUser && currentUser.userid) {
      console.log('Initializing socket for user:', currentUser.userid);
      
      // Initialize socket connection
      const newSocket = io('http://localhost:3001', {
        withCredentials: true,
        transports: ['websocket', 'polling'],
        forceNew: true, // Force new connection
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000,
      });

      newSocket.on('connect', () => {
        console.log('Connected to server, socket ID:', newSocket.id);
        setIsConnected(true);
        setConnectionAttempts(0);
        
        // Join user to their personal room
        newSocket.emit('join_user', currentUser.userid);
      });

      newSocket.on('joined_user_room', (data) => {
        console.log('Successfully joined user room:', data);
      });

      newSocket.on('disconnect', () => {
        console.log('Disconnected from server');
        setIsConnected(false);
      });

      newSocket.on('connect_error', (error) => {
        console.error('Connection error:', error);
        setIsConnected(false);
        setConnectionAttempts(prev => prev + 1);
      });

      newSocket.on('reconnect', (attemptNumber) => {
        console.log('Reconnected after', attemptNumber, 'attempts');
        setIsConnected(true);
        // Re-join user room after reconnection
        newSocket.emit('join_user', currentUser.userid);
      });

      setSocket(newSocket);

      return () => {
        console.log('Cleaning up socket connection');
        newSocket.close();
      };
    }
  }, [currentUser]);

  const value = {
    socket,
    isConnected,
    connectionAttempts
  };

  return (
    <SocketContext.Provider value={value}>
      {children}
    </SocketContext.Provider>
  );
};